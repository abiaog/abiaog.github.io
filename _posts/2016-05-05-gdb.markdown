---
layout: post
title:  "gdb"
date:   2016-05-05 
categories: jekyll update
---

# Richard Stallman 

Richard Stallman was the original author of gdb, and of many other gnu programs.
Stallman launched the GNU Project, founded the Free Software Foundation, developed the GNU Compiler Collection and GNU Emacs, and wrote the GNU General Public License.

# GNU Debugger

The GNU Debugger, usually called just GDB and named gdb as an executable file, is the standard debugger for the GNU operating system. However, its use is not strictly limited to the GNU operating system; it is a portable debugger that runs on many Unix-like systems and works for many programming languages, including Ada, C, C++, Objective-C, Free Pascal, Fortran, Java and partially others.


# An Example Debugging Session 

[main.cc](/code_for_post/gdb/main.cc)   

	g++ main.cpp -g -Wall -o main
	gdb main

# Help
	(gdb) h
	List of classes of commands:

	aliases -- Aliases of other commands
	breakpoints -- Making program stop at certain points
	data -- Examining data
	files -- Specifying and examining files
	internals -- Maintenance commands
	obscure -- Obscure features
	running -- Running the program
	stack -- Examining the stack
	status -- Status inquiries
	support -- Support facilities
	tracepoints -- Tracing of program execution without stopping the program
	user-defined -- User-defined commands

	Type "help" followed by a class name for a list of commands in that class.
	Type "help all" for the list of all commands.
	Type "help" followed by command name for full documentation.
	Type "apropos word" to search for commands related to "word".
	Command name abbreviations are allowed if unambiguous.

Frequently used commands,
	b
	p
	bt
	r
	c
	n
	s
	watch <var>
	save breakpoints -- Save current breakpoint definitions as a script
	source [-s] [-v] FILE

# .gdbinit

[.gdbinit](/code_for_post/gdb/.gdbinit)   
	gdb -x .gdbinit main

# gdbserver

[power.c](/code_for_post/gdb/power.c)   
[How to Debug Programs on Remote Server using GDBServer Example](http://www.thegeekstuff.com/2014/04/gdbserver-example/)

# Core Dump Example

[gdb_core_dump.c](/code_for_post/gdb/gdb_core_dump.c)   

	gcc -g code_for_post/gdb/gdb_core_dump.c 
	ulimit -c unlimited
	./a.out 
	gdb ./a.out core 

Output,

	root@baohua-VirtualBox:~/w/src/abiaog.github.io# gcc -g code_for_post/gdb/gdb_core_dump.c 
	code_for_post/gdb/gdb_core_dump.c: In function ‘do_it’:
	code_for_post/gdb/gdb_core_dump.c:28:12: warning: initialization makes pointer from integer without a cast [enabled by default]
	  char* p = 1; //定义一个字符指针变量a，指向地址1，这个地址肯定不是自己可以访问的，但是这行不会产生段错误
		    ^
	root@baohua-VirtualBox:~/w/src/abiaog.github.io# ./a.out 
	Segmentation fault (core dumped)
	root@baohua-VirtualBox:~/w/src/abiaog.github.io# ll
	total 308
	drwxrwx--- 1 root vboxsf   4096  5月  5 16:02 ./
	drwxrwx--- 1 root vboxsf   4096  5月  5 15:59 ../
	-rwxrwx--- 1 root vboxsf   8254  5月  5 16:02 a.out*
	-rwxrwx--- 1 root vboxsf 221184  5月  5 16:02 core*
	root@baohua-VirtualBox:~/w/src/abiaog.github.io# gdb ./a.out core 
	GNU gdb (Ubuntu 7.7-0ubuntu3.1) 7.7
	Copyright (C) 2014 Free Software Foundation, Inc.
	License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
	This is free software: you are free to change and redistribute it.
	There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
	and "show warranty" for details.
	This GDB was configured as "i686-linux-gnu".
	Type "show configuration" for configuration details.
	For bug reporting instructions, please see:
	<http://www.gnu.org/software/gdb/bugs/>.
	Find the GDB manual and other documentation resources online at:
	<http://www.gnu.org/software/gdb/documentation/>.
	For help, type "help".
	Type "apropos word" to search for commands related to "word"...
	Reading symbols from ./a.out...done.
	[New LWP 4189]
	Core was generated by `./a.out'.
	Program terminated with signal SIGSEGV, Segmentation fault.
	#0  0x0804840f in do_it () at code_for_post/gdb/gdb_core_dump.c:29
	29		*p = 'a'; //真正产生段错误的在这里，试图更改地址1的值，此时内核会终止该进程，并且把core文件dump出来
	(gdb) where
	#0  0x0804840f in do_it () at code_for_post/gdb/gdb_core_dump.c:29
	#1  0x080483f8 in main () at code_for_post/gdb/gdb_core_dump.c:23
	(gdb) bt
	#0  0x0804840f in do_it () at code_for_post/gdb/gdb_core_dump.c:29
	#1  0x080483f8 in main () at code_for_post/gdb/gdb_core_dump.c:23
	(gdb) 


# gdb -tui 

# ddd
GNU DDD is a graphical front-end for command-line debuggers such as GDB, DBX, WDB, Ladebug, JDB, XDB, the Perl debugger, the bash debugger bashdb, the GNU Make debugger remake, or the Python debugger pydb. Besides ``usual'' front-end features such as viewing source texts, DDD has become famous through its interactive graphical data display, where data structures are displayed as graphs.

[Debugging with DDD](http://www.gnu.org/software/ddd/manual/html_mono/ddd.html)

# Debugging Programs with Multiple Threads
https://sourceware.org/gdb/onlinedocs/gdb/Threads.html
http://www.cnblogs.com/xuxm2007/archive/2011/04/01/2002162.html

# Debugging with GDB in Emacs

# Debugging with GDB in VIM


# Reference
[使用gdb和core dump迅速定位段错误](http://my.oschina.net/michaelyuanyuan/blog/68618)

[gdb的gui用法](http://www.cnblogs.com/xuxm2007/archive/2011/08/13/2137055.html)

[A GDB Tutorial with Examples](http://www.cprogramming.com/gdb.html)

https://sourceware.org/gdb/current/onlinedocs/gdb/

https://www.cs.cmu.edu/~gilpin/tutorial/


